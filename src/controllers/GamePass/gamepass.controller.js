const AccKH = require("../../models/AccKH");
const Gamepass = require("../../models/Gamepass");
const LichSuDonHangGamePass = require("../../models/LichSuDonHangGamePass");

module.exports = {
    getGamepass: async (req, res) => {
        try {
            const { page, limit, TenSP, sort, order,  } = req.query; 

            // Chuy·ªÉn ƒë·ªïi th√†nh s·ªë
            const pageNumber = parseInt(page, 10);
            const limitNumber = parseInt(limit, 10);

            // T√≠nh to√°n s·ªë b·∫£n ghi b·ªè qua
            const skip = (pageNumber - 1) * limitNumber;

            // T·∫°o query t√¨m ki·∫øm
            const query = {};            
            
            // tang/giam
            let sortOrder = 1; // tang dn
            if (order === 'desc') {
                sortOrder = -1; 
            }
                        
            
            let sp = await Gamepass.find(query)
                .skip(skip)
                .limit(limitNumber)
                .sort({ [sort]: sortOrder })           

            const totalGamepass = await Gamepass.countDocuments(query); // ƒê·∫øm t·ªïng s·ªë ch·ª©c v·ª•

            const totalPages = Math.ceil(totalGamepass / limitNumber); // T√≠nh s·ªë trang

            if(sp) {
                return res.status(200).json({
                    message: "ƒê√£ t√¨m ra products",
                    errCode: 0,
                    data: sp,
                    totalGamepass,
                    totalPages,
                    currentPage: pageNumber,
                })
            } else {
                return res.status(500).json({
                    message: "T√¨m products th·∫•t b·∫°i!",
                    errCode: -1,
                })
            }
        } catch (error) {
            console.error(error);
            return res.status(500).json({
                message: "C√≥ l·ªói x·∫£y ra.",
                error: error.message,
            });
        }        
    },

    taoGamepass: async (req, res) => {
        try {
            const { tenGame, image, goiNap } = req.body;
    
            if (!tenGame || !Array.isArray(goiNap) || goiNap.length === 0) {
                return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n game v√† danh s√°ch g√≥i n·∫°p." });
            }
    
            const newGamepass = new Gamepass({
                tenGame,
                image,
                goiNap,
                soLuongBan: 0 // m·∫∑c ƒë·ªãnh 0 khi m·ªõi t·∫°o
            });
    
            const saved = await newGamepass.save();
    
            res.status(201).json({
                message: "‚úÖ Gamepass ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
                data: saved
            });
    
        } catch (err) {
            console.error("‚ùå L·ªói khi t·∫°o gamepass:", err);
            res.status(500).json({ message: "L·ªói server khi t·∫°o gamepass." });
        }
    },

    suaGamepass: async (req, res) => {
        try {
            const { tenGame, image, goiNap, _id } = req.body;
    
            const gamepass = await Gamepass.findById(_id);
            if (!gamepass) return res.status(404).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y gamepass." });
    
            // C·∫≠p nh·∫≠t tr∆∞·ªùng
            if (tenGame !== undefined) gamepass.tenGame = tenGame;
            if (image !== undefined) gamepass.image = image;
            if (goiNap !== undefined) gamepass.goiNap = goiNap;
    
            const updated = await gamepass.save();
    
            res.status(201).json({
                message: "‚úÖ ƒê√£ c·∫≠p nh·∫≠t gamepass th√†nh c√¥ng!",
                data: updated
            });
        } catch (err) {
            console.error("‚ùå L·ªói khi s·ª≠a gamepass:", err);
            res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t gamepass." });
        }
    },

    xoaGamepass: async (req, res) => {
        try {
            const { id } = req.params;
    
            const deleted = await Gamepass.findByIdAndDelete(id);
            if (!deleted) return res.status(404).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y gamepass ƒë·ªÉ xo√°." });
    
            res.json({
                message: "üóëÔ∏è ƒê√£ xo√° gamepass th√†nh c√¥ng!",
                data: deleted
            });
        } catch (err) {
            console.error("‚ùå L·ªói khi xo√° gamepass:", err);
            res.status(500).json({ message: "L·ªói server khi xo√° gamepass." });
        }
    },

    getDetailGamepass: async (req, res) => {
        try {
            const {idGamepass} = req.query
            console.log("id idGamepass: ", idGamepass);            

            let sp = await Gamepass.findById(idGamepass)
            if(sp) {
                return res.status(200).json({
                    data: sp,
                    message: "ƒê√£ c√≥ th√¥ng tin chi ti·∫øt!"
                })
            } else {
                return res.status(500).json({
                    message: "Th√¥ng tin chi ti·∫øt th·∫•t b·∫°i!"
                })
            }

        } catch (error) {
            console.error(error);
            return res.status(500).json({
                message: "C√≥ l·ªói x·∫£y ra.",
                error: error.message,
            });
        }
    },

    muahangGamePass: async (req, res) => {
        try {
            const {
                userId,
                gamepassId,
                goiNap,
                username,
                password,
                ma2fa,
                note
            } = req.body;
    
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
            const user = await AccKH.findById(userId);
            if (!user) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!' });
    
            // L·∫•y th√¥ng tin gamepass
            const gamepass = await Gamepass.findById(gamepassId);
            if (!gamepass) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y gamepass!' });
    
            // T√¨m g√≥i n·∫°p trong danh s√°ch
            const selectedGoi = gamepass.goiNap.find(g => g._id.toString() === goiNap);
            if (!selectedGoi) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y g√≥i n·∫°p!' });
    
            const tongTien = selectedGoi.giaTien;
    
            // Ki·ªÉm tra s·ªë d∆∞
            if (user.soDu < tongTien) {
                return res.status(400).json({ message: 'S·ªë d∆∞ kh√¥ng ƒë·ªß!' });
            }
    
            // Tr·ª´ s·ªë d∆∞
            user.soDu -= tongTien;
            await user.save();
    
            // T·∫°o ƒë∆°n h√†ng
            const donHang = new LichSuDonHangGamePass({
                user: userId,
                gamepass: gamepassId,
                goiNap: goiNap,
                tenTaiKhoan: username,
                matKhau: password,
                ma2FA: ma2fa,
                ghiChu: note,
                tongTien
            });
            await donHang.save();

            // TƒÉng s·ªë l∆∞·ª£ng b√°n
            gamepass.soLuongBan = (gamepass.soLuongBan || 0) + 1;
            await gamepass.save();
    
            return res.status(200).json({
                message: 'Ch√∫c m·ª´ng b·∫°n ƒë√£ mua th√†nh c√¥ng!',
                data: donHang
            });
        } catch (error) {
            console.error('L·ªói mua gamepass:', error);
            return res.status(500).json({ message: 'ƒê√£ c√≥ l·ªói x·∫£y ra!' });
        }
    },

    getLichSuDonHangDetail: async (req, res) => {
        try {
            // L·∫•y to√†n b·ªô l·ªãch s·ª≠ + populate gamepass
            const donHangs = await LichSuDonHangGamePass.find().populate('gamepass').populate('user');
    
            // Map t·ª´ng ƒë∆°n ƒë·ªÉ g·∫Øn th√™m chi ti·∫øt g√≥i n·∫°p
            const result = donHangs.map((don) => {
                const selectedGoiNap = don.gamepass?.goiNap?.find(
                    (goi) => goi._id.toString() === don.goiNap
                );
    
                return {
                    _id: don._id,
                    user: {
                        _id: don.user?._id,
                        name: don.user?.name,
                        email: don.user?.email
                    },
                    tenTaiKhoan: don.tenTaiKhoan,
                    matKhau: don.matKhau,
                    ma2FA: don.ma2FA,
                    ghiChu: don.ghiChu,
                    tongTien: don.tongTien,
                    createdAt: don.createdAt,
                    gamepass: {
                        _id: don.gamepass?._id,
                        tenGame: don.gamepass?.tenGame,
                        image: don.gamepass?.image,
                    },
                    goiNap: selectedGoiNap || null
                };
            });
    
            res.status(200).json({
                message: 'L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng!',
                data: result
            });
        } catch (error) {
            console.error('L·ªói l·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng:', error);
            res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch ƒë∆°n h√†ng!' });
        }
    },

    getLichSuDonHangByUser: async (req, res) => {
        try {
            const { userId } = req.query;
    
            if (!userId) {
                return res.status(400).json({ message: 'Thi·∫øu userId!' });
            }
    
            // T√¨m c√°c ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
            const donHangs = await LichSuDonHangGamePass.find({ user: userId })
                .populate('gamepass')
                .populate('user');
    
            // G·∫Øn th√™m chi ti·∫øt g√≥i n·∫°p t∆∞∆°ng ·ª©ng
            const result = donHangs.map((don) => {
                const selectedGoiNap = don.gamepass?.goiNap?.find(
                    (goi) => goi._id.toString() === don.goiNap
                );
    
                return {
                    _id: don._id,
                    user: {
                        _id: don.user?._id,
                        name: don.user?.name,
                        email: don.user?.email
                    },
                    tenTaiKhoan: don.tenTaiKhoan,
                    matKhau: don.matKhau,
                    ma2FA: don.ma2FA,
                    ghiChu: don.ghiChu,
                    tongTien: don.tongTien,
                    createdAt: don.createdAt,
                    gamepass: {
                        _id: don.gamepass?._id,
                        tenGame: don.gamepass?.tenGame,
                        image: don.gamepass?.image,
                    },
                    goiNap: selectedGoiNap || null
                };
            });
    
            res.status(200).json({
                message: 'L·∫•y ƒë∆°n h√†ng theo ng∆∞·ªùi d√πng th√†nh c√¥ng!',
                data: result
            });
        } catch (error) {
            console.error('L·ªói l·∫•y ƒë∆°n h√†ng theo user:', error);
            res.status(500).json({ message: 'L·ªói server khi l·∫•y ƒë∆°n h√†ng!' });
        }
    },

    editTrangThaiDonHangDVGamepass: async (req, res) => {
        try {
            // const id = req.params.id
            const { id, isActive } = req.body;

            const updatedAccount = await LichSuDonHangGamePass.findByIdAndUpdate(
                id,
                { isActive },
                { new: true }
            );

            if (updatedAccount) {
                return res.status(200).json({
                    message: "C·∫≠p nh·∫≠t th√†nh c√¥ng",
                    data: updatedAccount,
                });
            } else {
                return res
                    .status(404)
                    .json({ message: "Kh√¥ng t√¨m th·∫•y" });
            }
        } catch (error) {
            console.error(error);
            return res.status(500).json({
                message: "C√≥ l·ªói x·∫£y ra.",
                error: error.message,
            });
        }
    },
    
}